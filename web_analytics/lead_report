#!/usr/bin/env python
"""Usage:
    lead_report --create-database <database_name>
    lead_report <database_name> --add-from-xls -
    lead_report <database_name> <identifier> --add-geographic-data
    lead_report <database_name> <identifier> --validate-address
    lead_report <database_name> --report <start_yyyymmdd> <end_yyyymmdd> (--xlsx|--tab-delimited)
    lead_report <database_name> --get-identifiers-with-missing-county
    lead_report <database_name> --get-identifiers-with-missing-latitude-longitude
    lead_report <database_name> --get-identifiers-with-missing-validated-addresses

"""

# This data includes repeat visits, not just initial leads. I need to figure out
# how to report on initial lead data only.

# workflow should be to try address as entered first, and only request data
# from USPS if the geocoding lookup failed. 

# is there a good command line way to do this?
#    see which entries are without a county, latitude, or longitude.
#    see which entries have no validated address.

# adding county, latitude, longitude info 
# should work from the validated address, if present, and the non-validated address if not. 

# should be able to restrict output to initial leads only, since the system
# includes things that are not just initial leads.

import csv, datetime, json, openpyxl, os, re, sqlite3, sys, time, urllib.error, urllib.parse, urllib.request, xlrd
import xml.etree.ElementTree as ElementTree
from docopt import docopt
from geopy.geocoders import Nominatim

def create_database(conn):
    """Create initial sqlite database table to store lead info.

    Args:
        conn: an sqlite database connection.
    """

    try:
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS lead_report (
                     id integer PRIMARY KEY,
                     lead_perfection_id integer,
                     market varchar,
                     prospect varchar,
                     appt_date date,
                     result varchar,
                     set_date date,
                     setter varchar,
                     confirmer varchar,
                     cnf_date date,
                     source_sub varchar,
                     job_type varchar,
                     product varchar,
                     sales_rep_1 varchar,
                     sales_rep_2 varchar,
                     address varchar, 
                     city_state_zip varchar,
                     validated_address1 varchar,
                     validated_address2 varchar,
                     validated_city varchar,
                     validated_state varchar,
                     validated_zip varchar,
                     county varchar,
                     latitude real,
                     longitude real);''')
        conn.commit()
    except sqlite3.OperationalError:
        pass

def add_record(conn, record):
    """Add a record to our lead_report database.

    Args:
        record: a dict containing fields to add to our database.
    """
    c = conn.cursor()

    # check to see if the original lead perfection fields already exist in the
    # database. only add this record if those fields do not already exist. 
    c = conn.cursor().execute(
        '''SELECT count(*)
           FROM lead_report 
           WHERE lead_perfection_id=?
             and market=?
             and prospect=?
             and appt_date=?
             and result=?
             and set_date=?
             and setter=?
             and confirmer=?
             and cnf_date=?
             and source_sub=?
             and job_type=?
             and product=?
             and sales_rep_1=?
             and sales_rep_2=?
             and address=?
             and city_state_zip=?''',
        (
             record['lead_perfection_id'],
             record['market'],
             record['prospect'],
             record['appt_date'],
             record['result'],
             record['set_date'],
             record['setter'],
             record['confirmer'],
             record['cnf_date'],
             record['source_sub'],
             record['job_type'],
             record['product'],
             record['sales_rep_1'],
             record['sales_rep_2'],
             record['address'],
             record['city_state_zip']
        )
    )
    result = c.fetchone()
    if result[0] == 0:
        conn.cursor().execute(
	        'INSERT INTO lead_report VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);',
            (
                 None,
                 record['lead_perfection_id'],
                 record['market'],
                 record['prospect'],
                 record['appt_date'],
                 record['result'],
                 record['set_date'],
                 record['setter'],
                 record['confirmer'],
                 record['cnf_date'],
                 record['source_sub'],
                 record['job_type'],
                 record['product'],
                 record['sales_rep_1'],
                 record['sales_rep_2'],
                 record['address'],
                 record['city_state_zip'],
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None,
                 None
            )
        )
        conn.commit()

def get_identifiers_for_missing_county(conn):
    c = conn.cursor().execute(
        'SELECT id FROM lead_report WHERE county IS NULL;',
        ()
    )
    results = []
    for record in c.fetchall():
        results.append(record[0])
    return results

def get_identifiers_for_missing_latitude_longitude(conn):
    c = conn.cursor().execute(
        'SELECT id FROM lead_report WHERE latitude IS NULL AND longitude IS NULL;',
        ()
    )
    results = []
    for record in c.fetchall():
        results.append(record[0])
    return results

def get_identifiers_for_missing_validated_address(conn):
    c = conn.cursor().execute(
        'SELECT id FROM lead_report WHERE validated_address1 IS NULL AND validated_address2 IS NULL;',
        ()
    )
    results = []
    for record in c.fetchall():
        results.append(record[0])
    return results
    
def get_identifiers_for_missing_validated_addresses(conn):
    raise NotImplementedError

def get_records_from_xls(workbook):
    """Get records from a .xls file."""

    def get_datetime(cell_value):
        """Requires access to the workbook variable."""
        if cell_value == '':
            return None
        else:
            return datetime.datetime(
                *xlrd.xldate_as_tuple(cell_value, workbook.datemode)
            )

    def get_str(cell_value):
        return str(cell_value).strip()

    sheet = workbook.sheet_by_index(0)

    records = []
    r = 11
    while r < sheet.nrows:
        try:
            while sheet.cell_type(r, 0) != xlrd.XL_CELL_NUMBER:
                r += 1
        except IndexError:
            break
        if r >= sheet.nrows:
            break

        record = {}
        for field, rec in {
            'lead_perfection_id': { 'r_offset': 0, 'c': 0,  'cell_type': xlrd.XL_CELL_NUMBER },
            'market':             { 'r_offset': 1, 'c': 0,  'cell_type': xlrd.XL_CELL_TEXT   },
            'prospect':           { 'r_offset': 0, 'c': 1,  'cell_type': xlrd.XL_CELL_TEXT   },
            'appt_date':          { 'r_offset': 0, 'c': 2,  'cell_type': xlrd.XL_CELL_DATE   },
            'result':             { 'r_offset': 0, 'c': 5,  'cell_type': xlrd.XL_CELL_TEXT   },
            'set_date':           { 'r_offset': 0, 'c': 7,  'cell_type': xlrd.XL_CELL_DATE   },
            'setter':             { 'r_offset': 0, 'c': 9,  'cell_type': xlrd.XL_CELL_TEXT   },
            'confirmer':          { 'r_offset': 1, 'c': 9,  'cell_type': xlrd.XL_CELL_TEXT   },
            'cnf_date':           { 'r_offset': 0, 'c': 13, 'cell_type': xlrd.XL_CELL_DATE   },
            'source_sub':         { 'r_offset': 0, 'c': 15, 'cell_type': xlrd.XL_CELL_TEXT   },
            'job_type':           { 'r_offset': 1, 'c': 15, 'cell_type': xlrd.XL_CELL_TEXT   },
            'product':            { 'r_offset': 0, 'c': 19, 'cell_type': xlrd.XL_CELL_TEXT   },
            'sales_rep_1':        { 'r_offset': 0, 'c': 20, 'cell_type': xlrd.XL_CELL_TEXT   },
            'sales_rep_2':        { 'r_offset': 1, 'c': 20, 'cell_type': xlrd.XL_CELL_TEXT   },
            'address':            { 'r_offset': 0, 'c': 23, 'cell_type': xlrd.XL_CELL_TEXT   },
            'city_state_zip':     { 'r_offset': 1, 'c': 23, 'cell_type': xlrd.XL_CELL_TEXT   }
        }.items():
            assert sheet.cell_type(r + rec['r_offset'], rec['c']) in (rec['cell_type'], xlrd.XL_CELL_EMPTY)
            if rec['cell_type'] == xlrd.XL_CELL_DATE:
                fun = get_datetime
            elif rec['cell_type'] == xlrd.XL_CELL_NUMBER:
                fun = int
            elif rec['cell_type'] == xlrd.XL_CELL_TEXT:
                fun = get_str
            record[field] = fun(sheet.cell_value(r + rec['r_offset'], rec['c']))
        records.append(record)
        r += 2

    return records


def create_workbook(records):
    """ Create an .xlsx Excel file with this data."""
    workbook = openpyxl.Workbook()
    sheet = workbook.active

    fields = ('leadperfection_id', 'market', 'prospect', 'appt_date', 'result',
              'set_date', 'setter', 'confirmer', 'cnf_date', 'source_sub',
              'job_type', 'product', 'sales_rep_1', 'sales_rep_2',
              'address_line_1', 'address_line_2')

    for c, field in enumerate(fields):
        sheet.cell(row=1, column=c+1, value=field)

    for r, record in enumerate(records):
        for c, field in enumerate(fields):
            sheet.cell(row=r+2, column=c+1, value=record[field])
    return workbook

def convert_datestring_to_timestamp(s):
    """Convert a datestring to a timestamp.

    Returns:
       timestamp.
    """
    return datetime.datetime.strptime(s, '%m/%d/%Y').strftime('%Y-%m-%d')

def get_geograhpic_data(address):
    """Get geographic data for an address.

    Returns:
       a dict with entries for the county, state, latitude and longitude.
    """

    geolocator = Nominatim(timeout=30, user_agent="chesterfield_report")
    location = geolocator.geocode(address)

    if location == None or location.raw == None:
        return {
            'normalized_county': '',
            'normalized_state': '',
            'lat': '',
            'lng': '',
        }
    else:
        zipcode = ''
        m = re.search('\d{5}(?!.*\d{5})', location.raw['display_name'])
        try:
            zipcode = m.group(0)
        except AttributeError:
            pass

        county = ''
        m = re.search('([^, ]+) County,(?!=.*County)', location.raw['display_name'])
        try:
            county = m.group(1)
        except AttributeError:
            pass

        state = ''
        m = re.search('County, ([^,]+)', location.raw['display_name'])
        try:
            state = m.group(1)
        except AttributeError:
            pass

        return {
            'normalized_county': county,
            'normalized_state': state,
            'lat': location.raw['lat'],
            'lng': location.raw['lon']
        }

def add_validated_address(usps_user_id, street_address, city, state):
    """
    https://www.usps.com/business/web-tools-apis/address-information-api.pdf
    Note that the documentation for the API is innacurate. See the XML Request
    Example at 2.3.1.2. The terms of this API prohibit scraping for a database.
    Be sure to allow time between requests. 

    Usage:
    correct_address_usps(
        USER_ID,
        '9218999 W 159th',
        'Orland Park',
        'IL'
    )

    Raises an AttibuteError if the address cannot be validated.
    """

    address_validate_request = ElementTree.fromstring('<AddressValidateRequest/>')
    address_validate_request.set('USERID', usps_user_id)

    ElementTree.SubElement(address_validate_request, 'Revision').text = '1'
    address = ElementTree.SubElement(address_validate_request, 'Address')
    address.set('ID', '0')

    ElementTree.SubElement(address, 'Address1').text = street_address
    ElementTree.SubElement(address, 'Address2').text = ''
    ElementTree.SubElement(address, 'City').text = city
    ElementTree.SubElement(address, 'State').text = state
    ElementTree.SubElement(address, 'Zip5').text = ''
    ElementTree.SubElement(address, 'Zip4').text = ''

    params = {
        'API': 'Verify',
        'XML': ElementTree.tostring(address_validate_request).decode('utf-8')
    }

    response = urllib.request.urlopen(
        "https://secure.shippingapis.com/ShippingAPI.dll?{}".format(
            urllib.parse.urlencode(params)
        )
    )

    address_validate_response = ElementTree.fromstring(
        response.read().decode('utf-8')
    )

    return {
        'street_address': address_validate_response.find('Address/Address2').text,
        'city': address_validate_response.find('Address/City').text,
        'state': address_validate_response.find('Address/State').text,
    }

def create_workbook(records):
    """ Create an .xlsx Excel file with this data."""
    workbook = openpyxl.Workbook()
    sheet = workbook.active

    fields = ('leadperfection_id', 'market', 'prospect', 'appt_date', 'result',
              'set_date', 'setter', 'confirmer', 'cnf_date', 'source_sub',
              'job_type', 'product', 'sales_rep_1', 'sales_rep_2',
              'address_line_1', 'address_line_2')

    for c, field in enumerate(fields):
        sheet.cell(row=1, column=c+1, value=field)

    for r, record in enumerate(records):
        for c, field in enumerate(fields):
            sheet.cell(row=r+2, column=c+1, value=record[field])
    return workbook


if __name__=='__main__':
    options = docopt(__doc__)
    conn = sqlite3.connect(options['<database_name>'])

    if options['--add-from-xls']:
        workbook = xlrd.open_workbook(
            file_contents=sys.stdin.buffer.read(),
            logfile=open(os.devnull, 'w')
        )
        records = get_records_from_xls(workbook)
        for record in records:
            add_record(conn, record)
        sys.exit()

    elif options['--create-database']:
        create_database(conn)
        sys.exit()

    elif options['--report']:
        raise NotImplementedError

        writer = csv.writer(sys.stdout)
        for r in records:
            writer.writerow([
                r['leadperfection_id'],
                r['market'],
                r['prospect'],
                str(r['appt_date']).split(' ')[0],
                r['result'],
                str(r['set_date']).split(' ')[0],
                r['setter'],
                r['confirmer'],
                str(r['cnf_date']).split(' ')[0],
                r['source_sub'],
                r['job_type'],
                r['product'],
                r['sales_rep_1'],
                r['sales_rep_2'],
                r['address_line_1'],
                r['address_line_2']
            ])
        sys.exit()

    elif options['--get-identifiers-with-missing-county']:
        for identifier in get_identifiers_for_missing_county(conn):
            sys.stdout.write('{}\n'.format(str(identifier)))
        sys.exit() 

    elif options['--get-identifier-with-missing-latitude-longitude']:
        for identifier in get_identifiers_for_missing_latitude_longitude(conn):
            sys.stdout.write('{}\n'.format(str(identifier)))
        sys.exit() 

    elif options['--get-identifiers-with-missing-validated-addresses']:
        for identifier in get_identifiers_for_missing_validated_address(conn):
            sys.stdout.write('{}\n'.format(str(identifier)))
        sys.exit() 
