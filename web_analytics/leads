#!/usr/bin/env python
"""Usage:
    ./report <input_xls_filename> <output_xlsx_filename>
"""

import datetime
import json
import openpyxl
import os
import PyPDF2
import re
import sqlite3
import sys
import tabula
import urllib.parse
import urllib.request
import xlrd
from docopt import docopt

def convert_datestring_to_timestamp(s):
    return datetime.datetime.strptime(s, '%m/%d/%Y').strftime('%Y-%m-%d')


def create_database(conn):
    try:
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS leads (
                     id integer PRIMARY KEY,
                     prospect varchar,
                     appt_date date,
                     market varchar,
                     result varchar,
                     set_date date,
                     setter varchar,
                     confirmer varchar,
                     cnf_date date,
                     source_sub varchar,
                     job_type varchar,
                     product varchar,
                     sales_rep_1 varchar,
                     sales_rep_2 varchar,
                     gsa price);''')
        conn.commit()
    except sqlite3.OperationalError:
        pass


def add(conn, filename):
    c = conn.cursor()
    for v in get_data(filename):
        conn.cursor().execute(
	    'INSERT INTO leads VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);',
            v
        )
    conn.commit()


def retrieve(conn, month):
    c = conn.cursor()
    c.execute("SELECT * FROM leads WHERE set_date BETWEEN '{month}-01' AND '{month}-31';".format(month=month))
    return c.fetchall()


def get_records(workbook):
    """Get records from a .xls file."""

    def get_datetime(cell_value):
        """Requires access to the workbook variable."""
        if cell_value == '':
            return None
        else:
            return datetime.datetime(
                *xlrd.xldate_as_tuple(cell_value, workbook.datemode)
            )

    sheet = workbook.sheet_by_index(0)

    records = []
    r = 11
    while r < sheet.nrows:
        try:
            while sheet.cell_type(r, 0) != xlrd.XL_CELL_NUMBER:
                r += 1
        except IndexError:
            break
        if r >= sheet.nrows:
            break

        record = {}
        for field, rec in {
            'leadperfection_id': { 'r_offset': 0, 'c': 0,  'cell_type': xlrd.XL_CELL_NUMBER },
            'market':            { 'r_offset': 1, 'c': 0,  'cell_type': xlrd.XL_CELL_TEXT   },
            'prospect':          { 'r_offset': 0, 'c': 1,  'cell_type': xlrd.XL_CELL_TEXT   },
            'appt_date':         { 'r_offset': 0, 'c': 2,  'cell_type': xlrd.XL_CELL_DATE   },
            'result':            { 'r_offset': 0, 'c': 5,  'cell_type': xlrd.XL_CELL_TEXT   },
            'set_date':          { 'r_offset': 0, 'c': 7,  'cell_type': xlrd.XL_CELL_DATE   },
            'setter':            { 'r_offset': 0, 'c': 9,  'cell_type': xlrd.XL_CELL_TEXT   },
            'confirmer':         { 'r_offset': 1, 'c': 9,  'cell_type': xlrd.XL_CELL_TEXT   },
            'cnf_date':          { 'r_offset': 0, 'c': 13, 'cell_type': xlrd.XL_CELL_DATE   },
            'source_sub':        { 'r_offset': 0, 'c': 15, 'cell_type': xlrd.XL_CELL_TEXT   },
            'job_type':          { 'r_offset': 1, 'c': 15, 'cell_type': xlrd.XL_CELL_TEXT   },
            'product':           { 'r_offset': 0, 'c': 19, 'cell_type': xlrd.XL_CELL_TEXT   },
            'sales_rep_1':       { 'r_offset': 0, 'c': 20, 'cell_type': xlrd.XL_CELL_TEXT   },
            'sales_rep_2':       { 'r_offset': 1, 'c': 20, 'cell_type': xlrd.XL_CELL_TEXT   },
            'address_line_1':    { 'r_offset': 0, 'c': 23, 'cell_type': xlrd.XL_CELL_TEXT   },
            'address_line_2':    { 'r_offset': 1, 'c': 23, 'cell_type': xlrd.XL_CELL_TEXT   }
        }.items():
            assert sheet.cell_type(r + rec['r_offset'], rec['c']) in (rec['cell_type'], xlrd.XL_CELL_EMPTY)
            if rec['cell_type'] == xlrd.XL_CELL_DATE:
                fun = get_datetime
            elif rec['cell_type'] == xlrd.XL_CELL_NUMBER:
                fun = int
            elif rec['cell_type'] == xlrd.XL_CELL_TEXT:
                fun = str
            record[field] = fun(sheet.cell_value(r + rec['r_offset'], rec['c']))
        records.append(record)
        r += 2

    return records

def get_year_month(records):
    """ Get the year and month from these records."""

    dates = sorted(
        [r['cnf_date'] for r in records if r['cnf_date'] is not None]
    )
    d = dates[int(len(dates) / 2)]
    return (d.year, d.month)

def get_lat_lng(address):
    data = json.loads(
        urllib.request.urlopen(
            'http://open.mapquestapi.com/geocoding/v1/address?key={}&location={}'.format(
                MAPQUEST_API_KEY,
                urllib.parse.quote(address)
            )
        ).read()
    )

    for result in data['results']:
        for location in result['locations']:
            if location['adminArea3'] == '':
                continue
            return (
                location['adminArea3'],
                location['adminArea3Type'],
                location['adminArea4'],
                location['adminArea4Type'],
                location['latLng']
            )
    return None

def create_workbook(records):
    """ Create an .xlsx Excel file with this data."""
    workbook = openpyxl.Workbook()
    sheet = workbook.active

    fields = ('leadperfection_id', 'market', 'prospect', 'appt_date', 'result',
              'set_date', 'setter', 'confirmer', 'cnf_date', 'source_sub',
              'job_type', 'product', 'sales_rep_1', 'sales_rep_2',
              'address_line_1', 'address_line_2')

    for c, field in enumerate(fields):
        sheet.cell(row=1, column=c+1, value=field)

    for r, record in enumerate(records):
        for c, field in enumerate(fields):
            sheet.cell(row=r+2, column=c+1, value=record[field])
    return workbook


if __name__=='__main__':
    options = docopt(__doc__)
    create_workbook(
        get_records(
            xlrd.open_workbook(
                options['<input_xls_filename>'],
                logfile=sys.stderr
            )
        )
    ).save(options['<output_xlsx_filename>'])
